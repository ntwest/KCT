<#@template language="c#" hostspecific="true"#>  
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.String" name="GameDataDirectory" #>  
<#
    int major = 0; 
    int minor = 0; 
    int build = 0; 
	int patch = 0;
	bool versionSection = false;
	int i = 0;
	int i2 = 0;
	string s;

	// For Visual Studio / MSBuild Build-Time Template Resolution
	string GameDataDirectory = Host.ResolveParameterValue("-", "-", "GameDataDirectory");

	// For Visual Studio Design-Time Template Resolution
	if (GameDataDirectory == "")
	{
		GameDataDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile) + "\\..\\GameData";
	}
	
	string versionfile =  GameDataDirectory + @"\KerbalConstructionTime\.version";
	if (!File.Exists(versionfile))
	{
		Write("File: " + versionfile + " missing\n");		
	}

	try
	{
		foreach (var line in File.ReadAllLines(versionfile))
		{
			if (line != null)
			{
				if (!versionSection)
				{
					if (line.Contains("\"VERSION\""))
						versionSection = true;
				}
				else
				{
					if (line.Contains("}"))
							versionSection = false;
					i = line.IndexOf(":");
					i2 = line.IndexOf(",");
					if (i2 == -1)
						i2 = line.Length;
					if (i >= 0 && i2 >= 0)
					{
						s = line.Substring(i + 1, i2 - i - 1);

						if (line.Contains("MAJOR"))			
							Int32.TryParse(s, out major);			
			
						if (line.Contains("MINOR"))			
							Int32.TryParse(s, out minor);
			
						if (line.Contains("PATCH"))			
							Int32.TryParse(s, out patch);
			
						if (line.Contains("BUILD"))			
							Int32.TryParse(s, out build);
					}
				}
			}
		}
         
     }
     catch
     {
         major = 1; 
         minor = 0; 
         patch = 0; 
         build = 0; 
     }
	 //Write("File done");

 #>
 // This code was generated by a tool. Any changes made manually will be lost
 // the next time this code is regenerated.
 // 
  
 using System.Reflection;

 [assembly: AssemblyVersion("<#= major #>.<#= minor #>.<#= patch #>.<#= build #>")]